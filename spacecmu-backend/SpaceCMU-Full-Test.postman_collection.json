{
	"info": {
		"_postman_id": "a1b2c3d4-e5f6-4a7b-8c9d-1e2f3a4b5c6d",
		"name": "SpaceCMU - Complete API Test Suite",
		"description": "A comprehensive test suite for all features of the SpaceCMU backend. The chat system tests are self-contained in their own folder. Run requests in order within each folder.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000"
		},
		{
			"key": "user1Token",
			"value": ""
		},
		{
			"key": "user2Token",
			"value": ""
		},
		{
			"key": "user1Id",
			"value": ""
		},
		{
			"key": "user2Id",
			"value": ""
		},
		{
			"key": "post1Id",
			"value": ""
		},
		{
			"key": "acceptRequestId",
			"value": ""
		},
		{
			"key": "rejectRequestId",
			"value": ""
		},
		{
			"key": "commentId",
			"value": ""
		},
		{
			"key": "chatId",
			"value": ""
		},
		{
			"key": "messageId",
			"value": ""
		}
	],
	"item": [
		{
			"name": "1. User Setup",
			"item": [
				{
					"name": "1.1 Register User A",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"studentId\": \"111111\",\n    \"email\": \"usera@example.com\",\n    \"password\": \"passwordA\",\n    \"name\": \"User A\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.2 Register User B",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"studentId\": \"222222\",\n    \"email\": \"userb@example.com\",\n    \"password\": \"passwordB\",\n    \"name\": \"User B\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.3 Login User A & Verify Persona",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login successful and token received\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set(\"user1Token\", response.token);",
									"    pm.collectionVariables.set(\"user1Id\", response.user.id);",
									"    console.log('User A Token & ID stored.');",
									"});",
									"",
									"// NEW TEST: Verify that an automatic persona was created",
									"pm.test(\"User should have an automatic persona\", function () {",
									"    const getMeResponse = pm.sendRequest({",
									"        url: pm.collectionVariables.get('baseUrl') + '/api/users/me',",
									"        method: 'GET',",
									"        header: {",
									"            'Authorization': 'Bearer ' + pm.collectionVariables.get('user1Token')",
									"        }",
									"    }, function (err, res) {",
									"        const meData = res.json();",
									"        pm.expect(meData.persona).to.not.be.null;",
									"        pm.expect(meData.persona.displayName).to.not.be.empty;",
									"        console.log('✅ Verified: User A has persona -> ' + meData.persona.displayName);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"usera@example.com\",\n    \"password\": \"passwordA\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.4 Login User B & Verify Persona",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login successful and token received\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set(\"user2Token\", response.token);",
									"    pm.collectionVariables.set(\"user2Id\", response.user.id);",
									"    console.log('User B Token & ID stored.');",
									"});",
									"",
									"pm.test(\"User should have an automatic persona\", function () {",
									"    const getMeResponse = pm.sendRequest({",
									"        url: pm.collectionVariables.get('baseUrl') + '/api/users/me',",
									"        method: 'GET',",
									"        header: {",
									"            'Authorization': 'Bearer ' + pm.collectionVariables.get('user2Token')",
									"        }",
									"    }, function (err, res) {",
									"        const meData = res.json();",
									"        pm.expect(meData.persona).to.not.be.null;",
									"        pm.expect(meData.persona.displayName).to.not.be.empty;",
									"        console.log('✅ Verified: User B has persona -> ' + meData.persona.displayName);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"userb@example.com\",\n    \"password\": \"passwordB\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.5 [A] Get My Profile",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user1Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/me",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.6 [B] Get My Profile",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user2Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/me",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.7 [A] Update My Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Profile updated successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.eql(\"User updated successfully\");",
									"    console.log('✅ Verified: User profile was updated.');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user1Token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"User A (Updated)\",\n    \"bio\": \"This is my new bio after updating.\",\n    \"title\": \"Software Engineer\", \n    \"profileImg\": \"http://example.com/new-profile.jpg\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/me",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.8 [B] Update My Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Profile updated successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.eql(\"User updated successfully\");",
									"    console.log('✅ Verified: User profile was updated.');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user2Token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"User B (Updated)\",\n    \"bio\": \"This is my new bio after updating.\",\n    \"title\": \"Computer Engineer\",\n    \"profileImg\": \"http://example.com/new-profile.jpg\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/me",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.9 [A] Update persona",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Persona for User A updated successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response.persona.displayName).to.eql(\"UserA-NewName\");",
									"    pm.expect(response.persona.avatarUrl).to.eql(\"http://example.com/avatarA.jpg\");",
									"    console.log('✅ Verified: User A persona was updated.');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user1Token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"displayName\": \"UserA-NewName\",\n    \"avatarUrl\": \"http://example.com/avatarA.jpg\",\n    \"bio\": \"This is my new personaA bio.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/personas/{{user1Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"personas",
								"{{user1Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.10 [B] Update persona",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Persona for User B updated successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response.persona.displayName).to.eql(\"UserA-NewName\");",
									"    pm.expect(response.persona.avatarUrl).to.eql(\"http://example.com/avatarB.jpg\");",
									"    console.log('✅ Verified: User B persona was updated.');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user2Token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"displayName\": \"UserB-NewName\",\n    \"avatarUrl\": \"http://example.com/avatarB.jpg\",\n    \"bio\": \"This is my new personaB bio.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/personas/{{user2Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"personas",
								"{{user2Id}}"
							]
						}
					},
					"response": []
				},
		{
			"name": "1.11 Upload Image",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"File uploaded successfully and returns a URL\", function () {",
							"    pm.response.to.have.status(201);",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('url');",
							"    pm.expect(response.url).to.include('/uploads/file-');",
							"    console.log('✅ Upload successful! File URL:', response.url);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{uploadToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": []
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/api/uploads",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"uploads"
					]
				}
			},
			"response": []
		}
			]
		},
		{
			"name": "2. Friends System",
			"item": [
				{
					"name": "2.1 [Flow: Accept] A sends request to B",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user1Token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"toUserId\": \"{{user2Id}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/friends/request",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"friends",
								"request"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.2 [Flow: Accept] B lists requests",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should receive friend request from User A\", function () {",
									"    const response = pm.response.json();",
									"    const requestFromA = response.find(req => req.fromUser.id === pm.collectionVariables.get(\"user1Id\"));",
									"    pm.expect(requestFromA).to.not.be.undefined;",
									"    pm.collectionVariables.set(\"acceptRequestId\", requestFromA.id);",
									"    console.log('Friend Request ID (for accept) stored.');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user2Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/friends/requests",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"friends",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.3 [Flow: Accept] B accepts request",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user2Token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/friends/accept/{{acceptRequestId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"friends",
								"accept",
								"{{acceptRequestId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.4 [Flow: Reject] A sends request to B (again)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user1Token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"toUserId\": \"{{user2Id}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/friends/request",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"friends",
								"request"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.5 [Flow: Reject] B lists requests again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should receive new friend request from User A\", function () {",
									"    const response = pm.response.json();",
									"    const requestFromA = response.find(req => req.fromUser.id === pm.collectionVariables.get(\"user1Id\"));",
									"    pm.expect(requestFromA).to.not.be.undefined;",
									"    pm.collectionVariables.set(\"rejectRequestId\", requestFromA.id);",
									"    console.log('Friend Request ID (for reject) stored.');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user2Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/friends/requests",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"friends",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.6 [Flow: Reject] B rejects request",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user2Token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/friends/reject/{{rejectRequestId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"friends",
								"reject",
								"{{rejectRequestId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.7 List All Friends",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user1Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/friends",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"friends"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.8 [Flow: Cancel] A cancels request",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user1Token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/friends/request/{{cancelRequestId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"friends",
								"request",
								"{{cancelRequestId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.9 [A] Search for Friend 'User B'",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Search should return User B\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an('array').with.lengthOf(1);",
									"    pm.expect(response[0].name).to.eql(\"User B\");",
									"    console.log('✅ Friend search successful.');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user1Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/friends?name=User B",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"friends"
							],
							"query": [
								{
									"key": "name",
									"value": "User B"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "2.10 [A] Remove Friend B",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user1Token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/friends/{{user2Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"friends",
								"{{user2Id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "3. Posts & Interactions",
			"item": [
				{
					"name": "3.1.1 [B] Create Public Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Post created successfully\", function () {",
									"    pm.response.to.have.status(201);",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set(\"post1Id\", response.post.id);",
									"    console.log('Post 1 ID stored.');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user2Token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"content\": \"This is a public post from User B!\",\n    \"visibility\": \"public\",\n    \"imageUrl\": \"http://example.com/new-ImagePost.jpg\",\n    \"location\": \"CMU\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/posts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.1.2 [A] Create Friends-Only Post",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user1Token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"content\": \"This post is for my friends only!\",\n    \"visibility\": \"friends\",\n    \"imageUrl\": \"\",\n    \"location\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/posts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.2 Interaction Cycle",
					"item": [
						{
							"name": "Like Post",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user1Token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/posts/{{post1Id}}/like",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"posts",
										"{{post1Id}}",
										"like"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Liked Posts",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user1Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/users/me/likes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										"me",
										"likes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Undo Like",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user1Token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/posts/{{post1Id}}/like",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"posts",
										"{{post1Id}}",
										"like"
									]
								}
							},
							"response": []
						},
						{
							"name": "Repost Post",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user1Token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/posts/{{post1Id}}/repost",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"posts",
										"{{post1Id}}",
										"repost"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Reposted Posts",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user1Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/users/me/reposts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										"me",
										"reposts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Undo Repost",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user1Token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/posts/{{post1Id}}/repost",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"posts",
										"{{post1Id}}",
										"repost"
									]
								}
							},
							"response": []
						},
						{
							"name": "Save Post",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user1Token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/posts/{{post1Id}}/save",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"posts",
										"{{post1Id}}",
										"save"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Saved Posts",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user1Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/users/me/saved",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										"me",
										"saved"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unsave Post",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user1Token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/posts/{{post1Id}}/save",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"posts",
										"{{post1Id}}",
										"save"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "3.3 Comment Cycle",
					"item": [
						{
							"name": "Create Comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Comment created successfully\", function () {",
											"    pm.response.to.have.status(201);",
											"    const response = pm.response.json();",
											"    pm.collectionVariables.set(\"commentId\", response.id);",
											"    console.log('Comment ID stored.');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user1Token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\": \"This is a comment from User A!\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/posts/{{post1Id}}/comments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"posts",
										"{{post1Id}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Comment",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user1Token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\": \"This is an edited comment!\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/posts/{{post1Id}}/comments/{{commentId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"posts",
										"{{post1Id}}",
										"comments",
										"{{commentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Comment",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user1Token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/posts/{{post1Id}}/comments/{{commentId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"posts",
										"{{post1Id}}",
										"comments",
										"{{commentId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "3.4 Post Management",
					"item": [
						{
							"name": "Edit Post",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user2Token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\": \"This is the edited content of User B's post.\",\n    \"location\": \"Online\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/posts/{{post1Id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"posts",
										"{{post1Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Post",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user2Token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/posts/{{post1Id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"posts",
										"{{post1Id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "3.5 Anonymous Posting (Persona)",
					"description": "NOTE: This will fail with a 403 Forbidden error if the user has less than 10 friends.",
					"item": [
						{
							"name": "[A] Create Anonymous Post",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user1Token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\": \"This is an anonymous post from User A.\",\n    \"isAnonymous\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/posts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "[B] Create Anonymous Post",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user2Token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\": \"This is an anonymous post from User B.\",\n    \"isAnonymous\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/posts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"posts"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "4. Feeds & Search",
			"item": [
				{
					"name": "4.1 List All Posts",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user1Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/posts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "4.2 Get Public Feed (Paginated)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user1Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/posts/feed/public?page=1&limit=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"posts",
								"feed",
								"public"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "4.3 Get Friend Feed (Paginated)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Feed should contain 2 posts\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.items).to.be.an('array');",
									"    pm.expect(response.items.length).to.eql(2, \"Should see own post and friend's post\");",
									"});",
									"",
									"pm.test(\"Feed includes own friends-only post\", function() {",
									"    const response = pm.response.json();",
									"    const ownPost = response.items.find(post => post.author.name === \"User A (Feed)\");",
									"    pm.expect(ownPost).to.not.be.undefined;",
									"    pm.expect(ownPost.content).to.eql(\"This post is for my friends only!\");",
									"});",
									"",
									"pm.test(\"Feed includes friend's public post\", function() {",
									"    const response = pm.response.json();",
									"    const friendPost = response.items.find(post => post.author.name === \"User B (Feed)\");",
									"    pm.expect(friendPost).to.not.be.undefined;",
									"    pm.expect(friendPost.content).to.eql(\"Hello everyone! This is a public post.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user1Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/posts/feed/friends?page=1&limit=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"posts",
								"feed",
								"friends"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "5. Chat System (Standalone Test)",
			"item": [
				{
					"name": "5.1 [Chat] Register User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    console.log('✅ Chat User 1 created successfully');",
									"} else {",
									"    console.log('ℹ️ Chat User 1 already exists or error:', pm.response.json().message);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"studentId\": \"650001001\",\n  \"email\": \"chatuser1@cmu.ac.th\",\n  \"name\": \"Chat User 1\",\n  \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"register"
							]
						}
					}
				},
				{
					"name": "5.2 [Chat] Register User 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    console.log('✅ Chat User 2 created successfully');",
									"} else {",
									"    console.log('ℹ️ Chat User 2 already exists or error:', pm.response.json().message);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"studentId\": \"650001002\",\n  \"email\": \"chatuser2@cmu.ac.th\",\n  \"name\": \"Chat User 2\",\n  \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"register"
							]
						}
					}
				},
				{
					"name": "5.3 [Chat] Login User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('user1Token', response.token);",
									"    pm.collectionVariables.set('user1Id', response.user.id);",
									"    console.log('✅ Chat User 1 login successful');",
									"    console.log('Token stored for Chat User 1');",
									"} else {",
									"    console.log('❌ Chat User 1 login failed:', pm.response.json().message);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"chatuser1@cmu.ac.th\",\n  \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"login"
							]
						}
					}
				},
				{
					"name": "5.4 [Chat] Login User 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('user2Token', response.token);",
									"    pm.collectionVariables.set('user2Id', response.user.id);",
									"    console.log('✅ Chat User 2 login successful');",
									"    console.log('Token stored for Chat User 2');",
									"} else {",
									"    console.log('❌ Chat User 2 login failed:', pm.response.json().message);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"chatuser2@cmu.ac.th\",\n  \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"login"
							]
						}
					}
				},
				{
					"name": "5.5 [Chat] Create Direct Chat",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200 || pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('chatId', response.id);",
									"    console.log('✅ Direct chat created successfully');",
									"    console.log('Chat ID:', response.id);",
									"} else {",
									"    console.log('❌ Failed to create chat:', pm.response.json().message);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user1Token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"otherUserId\": \"{{user2Id}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/chats",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"chats"
							]
						}
					}
				},
				{
					"name": "5.6 [Chat] Get My Chats",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    console.log('✅ User has', response.length, 'chats');",
									"} else {",
									"    console.log('❌ Failed to get chats:', pm.response.json().message);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user1Token}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/chats",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"chats"
							]
						}
					}
				},
				{
					"name": "5.7 [Chat] Get Chat Messages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    console.log('✅ Retrieved', response.length, 'messages');",
									"} else {",
									"    console.log('❌ Failed to get messages:', pm.response.json().message);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user1Token}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/chats/{{chatId}}/messages",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"chats",
								"{{chatId}}",
								"messages"
							]
						}
					}
				}
			]
		},
		{
			"name": "6. Persona Management",
			"item": [
				{
					"name": "6.1 [A] Update Persona",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user1Token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"displayName\": \"UserA-NewPersonaName\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/personas/{{user1Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"personas",
								"{{user1Id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{user1Token}}",
				"type": "string"
			}
		]
	}
}