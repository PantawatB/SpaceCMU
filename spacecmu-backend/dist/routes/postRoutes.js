"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const auth_1 = require("../middleware/auth");
const postController_1 = require("../controllers/postController");
const router = (0, express_1.Router)();
// üìå Public endpoints (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á login)
router.get("/search", postController_1.searchPostsByAuthor);
router.get("/feed/public", postController_1.getPublicFeed);
router.get("/", postController_1.listPosts);
// üìå Protected endpoints (‡∏ï‡πâ‡∏≠‡∏á login)
// Feed ‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô
router.get("/feed/friends/:actorId", auth_1.authenticateToken, postController_1.getFriendFeed);
// üìå Get single post (must be after specific routes)
router.get("/:id", postController_1.getPost);
// ‡∏™‡∏£‡πâ‡∏≤‡∏á/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç/‡∏•‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå
router.post("/", auth_1.authenticateToken, postController_1.createPost);
router.put("/:id", auth_1.authenticateToken, postController_1.updatePost);
router.delete("/:id", auth_1.authenticateToken, postController_1.deletePost);
// ‡∏Å‡∏≤‡∏£‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö (like, repost, save)
router.post("/:id/like", auth_1.authenticateToken, postController_1.likePost);
router.delete("/:id/like", auth_1.authenticateToken, postController_1.undoLikePost);
router.post("/:id/repost", auth_1.authenticateToken, postController_1.repostPost);
router.delete("/:id/repost", auth_1.authenticateToken, postController_1.undoRepost);
router.post("/:id/save", auth_1.authenticateToken, postController_1.savePost);
router.delete("/:id/save", auth_1.authenticateToken, postController_1.unsavePost);
// GET /api/posts/:id/likers - ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏ô‡πÑ‡∏•‡∏Ñ‡πå
router.get("/:id/likers", postController_1.getPostLikers);
// GET /api/posts/:id/reposters - ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏ô‡∏£‡∏µ‡πÇ‡∏û‡∏™‡∏ï‡πå
router.get("/:id/reposters", postController_1.getPostReposters);
// GET /api/posts/:id/savers - ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏ô‡πÄ‡∏ã‡∏ü (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå)
router.get("/:id/savers", auth_1.authenticateToken, postController_1.getPostSavers);
exports.default = router;
