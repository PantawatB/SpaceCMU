{
  "info": {
    "name": "SpaceCMU - Simple Function Test",
    "description": "Simple test collection to verify all Chat functions work properly",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000"
    },
    {
      "key": "user1Token",
      "value": ""
    },
    {
      "key": "user2Token",
      "value": ""
    },
    {
      "key": "chatId",
      "value": ""
    },
    {
      "key": "messageId",
      "value": ""
    },
    {
      "key": "user1Id",
      "value": ""
    },
    {
      "key": "user2Id",
      "value": ""
    }
  ],
  "item": [
    {
      "name": "1Ô∏è‚É£ Create Test Users",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "if (pm.response.code === 200) {",
              "    console.log('‚úÖ User 1 created successfully');",
              "} else {",
              "    console.log('‚ÑπÔ∏è User 1 already exists or error:', pm.response.json().message);",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"studentId\": \"650001001\",\n  \"email\": \"user1@cmu.ac.th\",\n  \"name\": \"Test User 1\",\n  \"password\": \"password123\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/users/register",
          "host": ["{{baseUrl}}"],
          "path": ["api", "users", "register"]
        }
      }
    },
    {
      "name": "2Ô∏è‚É£ Create User 2",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "if (pm.response.code === 200) {",
              "    console.log('‚úÖ User 2 created successfully');",
              "} else {",
              "    console.log('‚ÑπÔ∏è User 2 already exists or error:', pm.response.json().message);",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"studentId\": \"650001002\",\n  \"email\": \"user2@cmu.ac.th\",\n  \"name\": \"Test User 2\",\n  \"password\": \"password123\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/users/register",
          "host": ["{{baseUrl}}"],
          "path": ["api", "users", "register"]
        }
      }
    },
    {
      "name": "3Ô∏è‚É£ Login User 1",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "if (pm.response.code === 200) {",
              "    const response = pm.response.json();",
              "    pm.collectionVariables.set('user1Token', response.token);",
              "    pm.collectionVariables.set('user1Id', response.user.id);",
              "    console.log('‚úÖ User 1 login successful');",
              "    console.log('Token stored for User 1');",
              "} else {",
              "    console.log('‚ùå User 1 login failed:', pm.response.json().message);",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"email\": \"user1@cmu.ac.th\",\n  \"password\": \"password123\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/users/login",
          "host": ["{{baseUrl}}"],
          "path": ["api", "users", "login"]
        }
      }
    },
    {
      "name": "4Ô∏è‚É£ Login User 2",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "if (pm.response.code === 200) {",
              "    const response = pm.response.json();",
              "    pm.collectionVariables.set('user2Token', response.token);",
              "    pm.collectionVariables.set('user2Id', response.user.id);",
              "    console.log('‚úÖ User 2 login successful');",
              "    console.log('Token stored for User 2');",
              "} else {",
              "    console.log('‚ùå User 2 login failed:', pm.response.json().message);",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"email\": \"user2@cmu.ac.th\",\n  \"password\": \"password123\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/users/login",
          "host": ["{{baseUrl}}"],
          "path": ["api", "users", "login"]
        }
      }
    },
    {
      "name": "5Ô∏è‚É£ Create Direct Chat",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "if (pm.response.code === 200 || pm.response.code === 201) {",
              "    const response = pm.response.json();",
              "    pm.collectionVariables.set('chatId', response.id);",
              "    console.log('‚úÖ Direct chat created successfully');",
              "    console.log('Chat ID:', response.id);",
              "} else {",
              "    console.log('‚ùå Failed to create chat:', pm.response.json().message);",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{user1Token}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"otherUserId\": \"{{user2Id}}\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/chats/direct",
          "host": ["{{baseUrl}}"],
          "path": ["api", "chats", "direct"]
        }
      }
    },
    {
      "name": "6Ô∏è‚É£ Send Message (User 1)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "if (pm.response.code === 200 || pm.response.code === 201) {",
              "    const response = pm.response.json();",
              "    pm.collectionVariables.set('messageId', response.id);",
              "    console.log('‚úÖ Message sent by User 1');",
              "    console.log('Message ID:', response.id);",
              "} else {",
              "    console.log('‚ùå Failed to send message:', pm.response.json().message);",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{user1Token}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"content\": \"Hello from User 1! üëã\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/chats/{{chatId}}/messages",
          "host": ["{{baseUrl}}"],
          "path": ["api", "chats", "{{chatId}}", "messages"]
        }
      }
    },
    {
      "name": "7Ô∏è‚É£ Send Message (User 2)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "if (pm.response.code === 200 || pm.response.code === 201) {",
              "    console.log('‚úÖ Message sent by User 2');",
              "} else {",
              "    console.log('‚ùå Failed to send message:', pm.response.json().message);",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{user2Token}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"content\": \"Hi User 1! Nice to meet you! üòä\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/chats/{{chatId}}/messages",
          "host": ["{{baseUrl}}"],
          "path": ["api", "chats", "{{chatId}}", "messages"]
        }
      }
    },
    {
      "name": "8Ô∏è‚É£ Get Chat Messages",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "if (pm.response.code === 200) {",
              "    const response = pm.response.json();",
              "    console.log('‚úÖ Retrieved', response.messages.length, 'messages');",
              "    response.messages.forEach((msg, index) => {",
              "        console.log(`Message ${index + 1}: ${msg.content} (by ${msg.sender.name})`);",
              "    });",
              "} else {",
              "    console.log('‚ùå Failed to get messages:', pm.response.json().message);",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{user1Token}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/chats/{{chatId}}/messages",
          "host": ["{{baseUrl}}"],
          "path": ["api", "chats", "{{chatId}}", "messages"]
        }
      }
    },
    {
      "name": "9Ô∏è‚É£ Get My Chats",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "if (pm.response.code === 200) {",
              "    const response = pm.response.json();",
              "    console.log('‚úÖ User has', response.chats ? response.chats.length : response.length, 'chats');",
              "    if (response.chats && response.chats.length > 0) {",
              "        console.log('Last message:', response.chats[0].lastMessage?.content || 'No messages');",
              "    } else if (response.length > 0) {",
              "        console.log('Last message:', response[0].lastMessage?.content || 'No messages');",
              "    }",
              "} else {",
              "    console.log('‚ùå Failed to get chats:', pm.response.json().message);",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{user1Token}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/chats",
          "host": ["{{baseUrl}}"],
          "path": ["api", "chats"]
        }
      }
    },
    {
      "name": "üîü Get Chat Participants",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "if (pm.response.code === 200) {",
              "    const response = pm.response.json();",
              "    console.log('‚úÖ Chat has', response.participants.length, 'participants');",
              "    response.participants.forEach(p => {",
              "        console.log('Participant:', p.name, '(' + p.email + ')');",
              "    });",
              "} else {",
              "    console.log('‚ùå Failed to get participants:', pm.response.json().message);",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{user1Token}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/chats/{{chatId}}/participants",
          "host": ["{{baseUrl}}"],
          "path": ["api", "chats", "{{chatId}}", "participants"]
        }
      }
    },
    {
      "name": "1Ô∏è‚É£1Ô∏è‚É£ Delete Message",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "if (pm.response.code === 200) {",
              "    console.log('‚úÖ Message deleted successfully');",
              "} else {",
              "    console.log('‚ùå Failed to delete message:', pm.response.json().message);",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{user1Token}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/chats/messages/{{messageId}}",
          "host": ["{{baseUrl}}"],
          "path": ["api", "chats", "messages", "{{messageId}}"]
        }
      }
    },
    {
      "name": "1Ô∏è‚É£2Ô∏è‚É£ Verify Message Deletion",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "if (pm.response.code === 200) {",
              "    const response = pm.response.json();",
              "    console.log('‚úÖ Verification complete');",
              "    console.log('Remaining messages:', response.messages.length);",
              "    if (response.messages.length > 0) {",
              "        console.log('Last message:', response.messages[response.messages.length - 1].content);",
              "    } else {",
              "        console.log('No messages left in chat');",
              "    }",
              "} else {",
              "    console.log('‚ùå Failed to verify:', pm.response.json().message);",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{user1Token}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/chats/{{chatId}}/messages",
          "host": ["{{baseUrl}}"],
          "path": ["api", "chats", "{{chatId}}", "messages"]
        }
      }
    },
    {
      "name": "üèÅ Final Status Check",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "console.log('üéâ TEST COMPLETE!');",
              "console.log('');",
              "console.log('‚úÖ Functions Tested:');",
              "console.log('- User Registration');",
              "console.log('- User Authentication (Login)');",
              "console.log('- Create Direct Chat');",
              "console.log('- Send Messages');",
              "console.log('- Retrieve Messages');",
              "console.log('- Get User Chats');",
              "console.log('- Get Chat Participants');",
              "console.log('- Delete Messages');",
              "console.log('- Message Deletion Verification');",
              "console.log('');",
              "if (pm.response.code === 200) {",
              "    const response = pm.response.json();",
              "    console.log('üìä Final Status:');",
              "    console.log('- Total Chats:', response.chats ? response.chats.length : response.length);",
              "    console.log('- All core chat functions working properly! üöÄ');",
              "} else {",
              "    console.log('‚ùå Final check failed');",
              "}",
              "console.log('');",
              "console.log('üîó Backend Status: All Chat APIs Functional');"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{user1Token}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/chats",
          "host": ["{{baseUrl}}"],
          "path": ["api", "chats"]
        }
      }
    }
  ]
}
