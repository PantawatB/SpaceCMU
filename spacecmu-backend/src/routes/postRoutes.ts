import { Router } from "express";
import { authenticateToken, checkBanned } from "../middleware/auth";
import {
  createPost,
  updatePost,
  deletePost,
  getPost,
  listPosts,
  likePost,
  undoLikePost,
  repostPost,
  undoRepost,
  savePost,
  unsavePost,
  getPublicFeed,
  getFriendFeed,
  searchPostsByAuthor,
  getPostLikers,
  getPostReposters,
  getPostSavers,
  getPostsByActor,
  reportPost,
} from "../controllers/postController";

const router = Router();

// üìå Public endpoints (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á login)
router.get("/search", searchPostsByAuthor);
router.get("/feed/public", getPublicFeed);
router.get("/", listPosts);

// üìå Protected endpoints (‡∏ï‡πâ‡∏≠‡∏á login)
// Feed ‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô
router.get("/feed/friends/:actorId", authenticateToken, getFriendFeed);

// üìå Get posts by actor
router.get("/actor/:actorId", authenticateToken, getPostsByActor);

// üìå Get single post (must be after specific routes)
router.get("/:id", getPost);

// ‡∏™‡∏£‡πâ‡∏≤‡∏á/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç/‡∏•‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå (banned users cannot do these)
router.post("/", authenticateToken, checkBanned, createPost);
router.put("/:id", authenticateToken, checkBanned, updatePost);
router.delete("/:id", authenticateToken, checkBanned, deletePost);

// ‡∏Å‡∏≤‡∏£‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö (like, repost, save) - banned users cannot interact
router.post("/:id/like", authenticateToken, checkBanned, likePost);
router.delete("/:id/like", authenticateToken, checkBanned, undoLikePost);
router.post("/:id/repost", authenticateToken, checkBanned, repostPost);
router.delete("/:id/repost", authenticateToken, checkBanned, undoRepost);
router.post("/:id/save", authenticateToken, checkBanned, savePost);
router.delete("/:id/save", authenticateToken, checkBanned, unsavePost);

// GET /api/posts/:id/likers - ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏ô‡πÑ‡∏•‡∏Ñ‡πå
router.get("/:id/likers", getPostLikers);

// GET /api/posts/:id/reposters - ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏ô‡∏£‡∏µ‡πÇ‡∏û‡∏™‡∏ï‡πå
router.get("/:id/reposters", getPostReposters);

// GET /api/posts/:id/savers - ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏ô‡πÄ‡∏ã‡∏ü (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå)
router.get("/:id/savers", authenticateToken, getPostSavers);

// POST /api/posts/:postId/report - ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÇ‡∏û‡∏™‡∏ï‡πå
router.post("/:postId/report", authenticateToken, reportPost);

export default router;
